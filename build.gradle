buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.ajoberstar:gradle-git:0.10.1'
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

import org.ajoberstar.grgit.Grgit

def gitHash = 'nogit'
def githubGitSha = System.getenv('GIT_HASH')
if (githubGitSha != null && githubGitSha.length() > 0) {
    gitHash = githubGitSha.substring(0, 8)
} else if (new File(projectDir, '.git').exists()) {
    def repo = Grgit.open(project.file('.'))
    gitHash = repo.log().find().abbreviatedId
}

version = "${mc_version}-${mod_version}-${gitHash}"
group = package_group
archivesBaseName = "${mod_name}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20200514-1.16'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                cookiecore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                cookiecore {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'cookiecore', '--all', '--output', file('src/generated/resources/')

            mods {
                cookiecore {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

processResources {
    // replace
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand (
            'version': mod_version,
            'forge_version': forge_version,
            'forge_version_major': forge_version_major,
            'mc_version': mc_version,
            'mc_version_next_major': mc_version_next_major
        )
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

// Example for how to get properties into the manifest for reading by the runtime..

jar {
    manifest {
        attributes([
            "Specification-Title": project.name,
            "Specification-Vendor": "ephys",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": mod_version,
            "Implementation-Vendor" :"ephys",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),

            "Built-By": System.getProperty('user.name'),
            "Created-By": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
            "Git-Hash": gitHash
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task deobfJar(type: Jar) {
    classifier = 'deobf'
    from sourceSets.main.output
}

tasks.build.dependsOn sourcesJar, deobfJar

publishing {
    tasks.publish.dependsOn 'build'

    publications {
        mavenJava(MavenPublication) {
            artifactId project.archivesBaseName

            artifact reobfArtifact
            artifact deobfJar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ephys/cookiecore")
            credentials {
                username = project.findProperty("gpr.user") as String ?: System.getenv("GH_MVN_USERNAME")
                password = project.findProperty("gpr.key") as String ?: System.getenv("GH_MVN_PASSWORD")
            }
        }
    }
}
